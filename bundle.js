(function (React$1, ReactDOM, ReactDropdown, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
        'https://gist.githubusercontent.com/bbbbrianna/e74082354cbdfe18d42c7b66ecdefa76/raw/0a1bea080c2d734561a026853f2faa4e3ff2a9f7/yearly_music_trend.csv';
  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Tempo = +d.bpm;
        d.Energy = +d.nrgy;
        d.Dancibility = +d.dnce;
        d.Loudness = +d.dB;
        d.Liveness = +d.live;
        d.Length = +d.dur;
        d.Valence = +d.val;
        d.Acousticness = +d.acous;
        d.Speechiness = +d.spch;
        d.Popularity = +d.pop;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    colorScale,
    colorValue,
    tooltipValue,
    circleRadius
  }) =>
    data.map((d) => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), fill: colorScale(colorValue(d)), r: circleRadius },
        React.createElement( 'title', null, tooltipValue(d) )
      )
    ));

  const ColorLegend = ({
    colorScale,
    tickSpacing = 20,
    tickSize = 10,
    tickTextOffset = 20,
    onHover,
    hoveredValue,
    fadeOpacity
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: () => {
          onHover(domainValue);
        }, onMouseOut: () => {
          onHover(null);
        }, opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          domainValue
        )
      )
    ));

  const width = 960;
  const menuHeight = 60;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 250, bottom: 65, left: 90 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 45;
  const fadeOpacity = 0.1;

  const attributes = [
    { value: 'Tempo', label: 'Tempo' },
    { value: 'Energy', label: 'Energy' },
    { value: 'Dancibility', label: 'Dancibility' },
    { value: 'Loudness', label: 'Loudness' },
    { value: 'Length', label: 'Length' },
    { value: 'Acousticness', label: 'Acousticness' },
    { value: 'Speechiness', label: 'Speechiness' },
    { value: 'Valence', label: 'Valence' },
    { value: 'Popularity', label: 'Popularity' }
  ];



  const attributesColor = [
    { value: 'top genre', label: 'Top Genre' },
    { value: 'artist', label: 'Artist' },
  ];

  const Slider = ({ selectedYear, onSelectedYearChange }) => (
    React$1__default.createElement( 'input', {
      type: "range", min: "2010", max: "2019", step: "1", onChange: (event) => onSelectedYearChange(event.target.value) })
  );

  const getLabel = (value) => {
    for (let i = 0; i < attributes.length; i++) {
      if (attributes[i].value === value) {
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);

    const initialXAttribute = 'Tempo';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);
    const xValue = (d) => d[xAttribute];
    const xAxisLabel = getLabel(xAttribute);

    const initialYAttribute = 'Energy';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yValue = (d) => d[yAttribute];
    const yAxisLabel = getLabel(yAttribute);
    
    const initialColorAttribute = 'top genre';
    const [colorAttribute, setColorAttribute] = React$1.useState(initialColorAttribute);

    const initialYear = '2010';
    const [selectedYear, setSelectedYear] = React$1.useState(initialYear);
    
    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const selectedYearValues = (d) => d.year;
    const filteredData = data.filter((d) => 
          selectedYear === selectedYearValues(d)).slice(0,20);

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const colorLegendLabel = colorAttribute;
    const colorValue = (d) => d[colorAttribute];
    const filteredDataRegion = filteredData.filter(
      (d) => hoveredValue === colorValue(d)
    );

    const xAxisTickFormat = d3.format('.2s');

    const xScale = d3.scaleLinear()
      .domain(d3.extent(filteredData, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3.scaleLinear()
      .domain(d3.extent(filteredData, yValue))
      .range([innerHeight, 0]);

    const colorScale = d3.scaleOrdinal()
      .domain(filteredData.map(colorValue))
      .range(['#800000','#DC143C','#DAA520','#808000','#137B80', 
              '#000080','#3CB371', '#8E6C8A','#2F4F4F','#4682B4',
              '#87CEEB','#008000','#8A2BE2','#8B008B','#DA70D6',
              '#FF1493','#8B4513','#BC8F8F','#708090','#00FF00'
      ]);

    const circleRadius = 12;

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
        React$1__default.createElement( 'label', { className: "dropdown-label", for: "year" }, "Year"),
          React$1__default.createElement( Slider, {
            selectedYear: selectedYear, onSelectedYearChange: setSelectedYear }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Color"),
          React$1__default.createElement( ReactDropdown, {
            options: attributesColor, id: "Year-select", value: colorAttribute, onChange: ({ value }) => setColorAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "X"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, id: "x-select", value: xAttribute, onChange: ({ value }) => setXAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, id: "Y-select", value: yAttribute, onChange: ({ value }) => setYAttribute(value) })


        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
              innerHeight / 2
            }) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
             React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 20}, 60)` },
              React$1__default.createElement( 'text', { x: 46, y: -25, className: "axis-label", textAnchor: "middle" },
                colorLegendLabel
              ),
              React$1__default.createElement( ColorLegend, {
                tickSpacing: 18, tickSize: 5, tickTextOffset: 6, tickSize: 6, colorScale: colorScale, colorValue: colorValue, onHover: setHoveredValue, hoveredValue: hoveredValue, fadeOpacity: fadeOpacity })
            ),
            React$1__default.createElement( 'g', { opacity: hoveredValue ? 0.2 : 1 },
              React$1__default.createElement( Marks, {
                data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipValue: (d) =>
                  'title:' +
                  d.title +
                  '			Artist:' +
                  d.artist +
                  '     Top Genre:' +
                  d['top genre'], circleRadius: circleRadius })
            ),
            React$1__default.createElement( Marks, {
              data: filteredDataRegion, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, fadeOpacity: fadeOpacity, colorScale: colorScale, colorValue: colorValue, tooltipValue: (d) =>
                  'title:' +
                  d.title +
                  '				Artist:' +
                  d.artist +
                  '     	Top Genre:' +
                  d['top genre'], circleRadius: circleRadius }),
            
         React$1__default.createElement( 'text', {
            className: "axis-label", x: -30, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
         selectedYear
          )
          )
        )
      )
    );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, ReactDropdown, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,